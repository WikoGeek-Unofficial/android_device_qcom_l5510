<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) 2014, The Linux Foundation. All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:
        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above
          copyright notice, this list of conditions and the following
          disclaimer in the documentation and/or other materials provided
          with the distribution.
        * Neither the name of The Linux Foundation nor the names of its
          contributors may be used to endorse or promote products derived
          from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
    WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
    ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
    OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
    IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
-->

<resources>
   <!-- Whether cpu boost is enabled for overscroller fling. -->
   <bool name="config_enableCpuBoostForOverScrollerFling">true</bool>
   <integer name="flingboost_schedboost_param">0x1E01</integer>
   <integer name="flingboost_cpuboost_param">0x20D</integer>
   <integer name="flingboost_preferidle_param">0x3E01</integer>
   <!-- Whether cpu boost is enabled for horizontal scroll. -->
   <bool name="config_enableCpuBoostForScroller">true</bool>
   <integer name="scrollboost_schedboost_param">0x1E01</integer>
   <integer name="scrollboost_cpuboost_param">0x20D</integer>
   <integer name="scrollboost_preferidle_param">0x3E01</integer>
   <!-- Whether cpu boost is enabled for application's 1st launch. -->
   <bool name="config_enableCpuBoostForAppLaunch">true</bool>
   <integer name="launchboost_timeout_param">2000</integer>
   <integer name="launchboost_schedboost_param">0x1E01</integer>
   <integer name="launchboost_cpuboost_param">0x20F</integer>
   <integer name="launchboost_pcdisbl_param">0x101</integer>
   <integer name="launchboost_ksmboost_param">0x1C00</integer>
   <!-- Whether cpu boost is enabled for animation during exit and entry -->
   <bool name="config_enablePerfBoostForAnimation">true</bool>
   <integer name="animationboost_schedboost_param">0x1E01</integer>
   <integer name="animationboost_cpuboost_param">0x20B</integer>
   <integer name="animationboost_timeout_param">600</integer>
   <!-- Indicate whether to allow the device to suspend when the screen is off
   due to the proximity sensor.  This resource should only be set to true
   if the sensor HAL correctly handles the proximity sensor as a wake-up source.
   Otherwise, the device may fail to wake out of suspend reliably.
   The default is false. -->
   <bool name="config_suspendWhenScreenOffDueToProximity">true</bool>

   <!-- Activities list for boost -->
   <string-array translatable="false" name="boost_activityList">
        <item>chrome</item>
        <item>browser</item>
   </string-array>

   <!-- Activity scroll boost params -->
   <integer name="ascrollboost_timeout">17</integer>
   <integer name="ascrollboost_schedboost">0x1E01</integer>
   <integer name="ascrollboost_cpuboost">0x20F</integer>
   <integer name="ascrollboost_pcdisbl">0x101</integer>
   <!-- Should the device show AM/PM in unlock screen -->
   <bool name="config_show_ampm_in_unlock_screen">true</bool>
   
  

    <!-- Whether a software navigation bar should be shown. NOTE: in the future this may be
         autodetected from the Configuration. -->
    <bool name="config_showNavigationBar">true</bool> 

    <!-- zenghaihui add -->

    <!-- Minimum allowable screen brightness to use in a very dark room.
         This value sets the floor for the darkest possible auto-brightness
         adjustment.  It is expected to be somewhat less than the first entry in
         config_autoBrightnessLcdBacklightValues so as to allow the user to have
         some range of adjustment to dim the screen further than usual in very
         dark rooms. The contents of the screen must still be clearly visible
         in darkness (although they may not be visible in a bright room). -->
    <integer name="config_screenBrightnessDark">8</integer>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N + 1 control points as follows:
         (1-based arrays)

         Point 1:            (0, value[1]):             lux <= 0
         Point 2:     (level[1], value[2]):  0        < lux <= level[1]
         Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
         ...
         Point N+1: (level[N], value[N+1]):  level[N] < lux

         The control points must be strictly increasing.  Each control point
         corresponds to an entry in the brightness backlight values arrays.
         For example, if LUX == level[1] (first element of the levels array)
         then the brightness will be determined by value[2] (second element
         of the brightness values array).

         Spline interpolation is used to determine the auto-brightness
         backlight values for LUX levels between these control points.

         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>128</item>
        <item>256</item>
        <item>384</item>
        <item>512</item>
        <item>640</item>
        <item>768</item>
        <item>896</item>
        <item>1024</item>
        <item>2048</item>
        <item>4096</item>
        <item>6144</item>
        <item>8192</item>
        <item>10240</item>
        <item>12288</item>
        <item>14336</item>
        <item>16384</item>
        <item>18432</item>
    </integer-array>

    <!-- Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>8</item>
        <item>64</item>
        <item>98</item>
        <item>104</item>
        <item>110</item>
        <item>116</item>
        <item>122</item>
        <item>128</item>
        <item>134</item>
        <item>182</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
    </integer-array>

    <!-- zenghaihui add -->
    <!-- Vibrator pattern for feedback about touching a virtual key -->
    <integer-array name="config_virtualKeyVibePattern">
        <item>0</item>
        <item>60</item>
    </integer-array>
</resources>
